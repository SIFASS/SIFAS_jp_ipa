# vim: expandtab tabstop=2 shiftwidth=2
name: Download IPA

env:
  appUrl: "https://apps.apple.com/jp/app/id1377018522"
  appBundleId: "com.klab.lovelive.allstars"
  appStore: "JP"
  appName: "allstars"
  PYTHONIOENCODING: utf-8
  GIT_SSH_COMMAND: 'ssh -i $HOME/.ssh/ssh.key'

on: 
  push:
  schedule:
    - cron: '30 * * * *'
  workflow_dispatch:
    inputs:
      unk:
  repository_dispatch:

jobs:
  ipa_update:
    name: 'Update IPA'
    runs-on: "ubuntu-latest"
    outputs:
      NEED_UPDATE: ${{ steps.check.outputs.NEED_UPDATE }}
    steps:
      - name: Set up git repository
        uses: actions/checkout@v2
      - name: Install NyaMisty/ipatool-py
        run: |
            git clone https://github.com/NyaMisty/ipatool-py
            pip3 install -r ipatool-py/requirements.txt
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3

      - name: Pre check version
        id: check
        run: |
            pip3 install requests
            if python3 workflow_helper/precheck_version.py ${{ env.appStore }} ${{ env.appBundleId }}; then
                echo "Version updated! Continue to download!"
                echo '::set-output name=NEED_UPDATE::1'
            else
                echo "Version unchanged! Relax~"
                echo '::set-output name=NEED_UPDATE::0'
            fi
        shell: bash
      
      - name: Download ipa
        if: ${{ steps.check.outputs.NEED_UPDATE == 1 }}
        env:
          APPLEID: ${{ secrets.APPLEID }}
          APPLEID_PWD: ${{ secrets.APPLEID_PWD }}
        run: |
            python3 workflow_helper/download_ipa.py ${{ env.appStore }} ${{ env.appBundleId }} $APPLEID $APPLEID_PWD
            mkdir ${{ runner.temp }}/ipaDown
            mv *.ipa ${{ runner.temp }}/ipaDown/${{ env.appName }}.ipa
      #- name: "Upload package"
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: ${{ env.appName }}.ipa
      #    path: ${{ runner.temp }}/ipaDown/${{ env.appName }}.ipa
      - name: Split ipa
        if: ${{ steps.check.outputs.NEED_UPDATE == 1 }}
        run: split --bytes=1879048192 --suffix-length=3 --numeric-suffix ${{ env.appName }}.ipa ${{ env.appName }}.ipa.
        working-directory: ${{ runner.temp }}/ipaDown
        shell: bash
      - name: Get current version
        if: ${{ steps.check.outputs.NEED_UPDATE == 1 }}
        id: curver
        run: echo "::set-output name=curver::$(cat curver.txt)"
        shell: bash
      #- name: Create tag     
      #  uses: actions/github-script@v3
      #  with:
      #    github-token: ${{ github.token }}
      #    script: |
      #      github.git.createRef({
      #        owner: context.repo.owner,
      #        repo: context.repo.repo,
      #        ref: "refs/tags/${{ env.appName }}-${{ steps.curver.outputs.curver }}",
      #        sha: context.sha
      #      })
      #- name: Pushing to release
      #  uses: softprops/action-gh-release@v1
      #  with:
      #    files: ${{ runner.temp }}/ipaDown/${{ env.appName }}.ipa.*
      #    tag_name: "${{ env.appName }}-${{ steps.curver.outputs.curver }}"
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pushing to release
        if: ${{ steps.check.outputs.NEED_UPDATE == 1 }}
        uses: ncipollo/release-action@v1
        with:
          name: "${{ env.appName }}-${{ steps.curver.outputs.curver }}"
          commit: ${{ github.sha }}
          tag: "${{ env.appName }}-${{ steps.curver.outputs.curver }}"
          artifacts: ${{ runner.temp }}/ipaDown/${{ env.appName }}.ipa.*
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Commit ver change
        if: ${{ steps.check.outputs.NEED_UPDATE == 1 }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add curver.txt
          git commit -m "Updating app to ver ${{ steps.curver.outputs.curver }}" -a
        shell: bash
      - name: Push changes
        if: ${{ steps.check.outputs.NEED_UPDATE == 1 }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  binary_decrypt:
    if: ${{ needs.ipa_update.outputs.NEED_UPDATE == 1 }}
    name: 'Decrypt Binary'
    runs-on: "ubuntu-20.04"
    needs:
      - ipa_update
    steps:
      - name: Set up git repository
        uses: actions/checkout@v2
      - name: Update git
        run: git pull origin master
      
      - name: Get current version
        id: version
        run: echo "::set-output name=version::$(cat curver.txt)"

      - id: download-ipa-000
        name: Download ipa 000
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: tags/${{ env.appName }}-${{ steps.version.outputs.version }}
          file: ${{ env.appName }}.ipa.000
          target: ${{ env.appName }}.ipa.000
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: download-ipa-001
        name: Download ipa 001
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          version: tags/${{ env.appName }}-${{ steps.version.outputs.version }}
          file: ${{ env.appName }}.ipa.001
          target: ${{ env.appName }}.ipa.001
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge ipa
        run: |
          cat ${{ env.appName }}.ipa.* > ${{ runner.temp }}/${{ env.appName }}.ipa
          rm ${{ env.appName }}.ipa.*

      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3
      #  env:
      #    DECRYPT_SERVER: ${{ secrets.DECRYPT_SERVER }}
      #    DECRYPT_SERVER_TOKEN: ${{ secrets.DECRYPT_SERVER_TOKEN }}
      
      - name: Extract Metadata
        run: unzip -j ${{ runner.temp }}/${{ env.appName }}.ipa "Payload/${{ env.appName }}.app/Data/Managed/Metadata/global-metadata.dat" -d "."

      - name: Decrypt binary
        env:
          DECRYPT_SERVER: ${{ secrets.DECRYPT_SERVER }}
          DECRYPT_SERVER_TOKEN: ${{ secrets.DECRYPT_SERVER_TOKEN }}
        run: |
          python3 workflow_helper/decrypt_binary.py ${{ runner.temp }}/${{ env.appName }}.ipa

      - name: Setup SSH Key
        env:
          SSHK: ${{ secrets.SIFASS_KEY }}
        run: |
          mkdir -p $HOME/.ssh
          ssh-keyscan -H gitlab.com > $HOME/.ssh/known_hosts
          echo "$SSHK" > $HOME/.ssh/ssh.key
          chmod 600 $HOME/.ssh/ssh.key

      - name: Set up gitlab repository
        run: |
          git clone git@gitlab.com:SIFASS/SIFAS_jp_bin.git SIFAS_jp_bin

      - name: Commit binary file & Push
        run: |
          cd SIFAS_jp_bin
          cp ../${{ env.appName }} ../global-metadata.dat .
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git lfs install
          git lfs track
          git add ${{ env.appName }} global-metadata.dat
          git commit -m "Decrypted binary for version ${{ steps.version.outputs.version }}"
          git push
        shell: bash
      
      - name: Notify binary stub repository
        run: |
          git clone git@github.com:SIFASS/SIFAS_jp_bin_stub.git SIFAS_jp_bin_stub
          cd SIFAS_jp_bin_stub
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "sifas-jp-${{ steps.version.outputs.version }}"
          git push origin --tags
        shell: bash